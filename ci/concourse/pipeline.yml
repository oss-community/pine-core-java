groups:
  - name: dev
    jobs:
      - dev-pine-core-java
  - name: uat
    jobs:
      - uat-pine-core-java
  - name: prod
    jobs:
      - prod-pine-core-java

resources:
  - name: repo
    type: git
    icon: github
    source:
      uri: git@github.com:oss-community/pine-core-java.git
      branch: main
      private_key: ((GITHUB_KEY))

jobs:
  - name: dev-pine-core-java
    plan:
      - get: repo
        trigger: true
      - task: build
        privileged: true
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: $DOCKER_USERNAME/openjdk17
              tag: latest
          caches:
            - path: $HOME/.m2/repository
          inputs:
            - name: repo
          outputs:
            - name: artifact
          params:
            DOCKER_USERNAME: ((DOCKER_USERNAME))
          run:
            path: sh
            args:
              - -exc
              - |
                mvn -f repo/pom.xml validate
                mvn -f repo/pom.xml clean package -DskipTests=true -s repo/settings.xml -P source,javadoc,license
                mvn -f repo/pom.xml test -s repo/settings.xml
  - name: uat-pine-core-java
    plan:
      - get: repo
        passed: [ dev-pine-core-java ]
      - task: build
        privileged: true
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: $DOCKER_USERNAME/openjdk17
              tag: latest
          caches:
            - path: $HOME/.m2/repository
          inputs:
            - name: repo
          outputs:
            - name: artifact
          params:
            DOCKER_USERNAME: ((DOCKER_USERNAME))
            GITHUB_USERNAME: ((GITHUB_USERNAME))
            GITHUB_EMAIL: ((GITHUB_EMAIL))
            PRIVKEY: ((GITHUB_KEY))
            PUBKEY: ((GITHUB_KEY_PUB))
          run:
            path: sh
            args:
              - -exc
              - |
                git config --global user.email "$GITHUB_USERNAME"
                git config --global user.name "$GITHUB_EMAIL"
                
                mkdir ~/.ssh
                ls ~/.ssh/
                set +x
                echo "$PRIVKEY" > ~/.ssh/id_rsa
                echo "$PUBKEY" > ~/.ssh/id_rsa.pub
                chmod 600 ~/.ssh/id_rsa
                chmod 600 ~/.ssh/id_rsa.pub
                echo "Host *" > ~/.ssh/config
                echo "    StrictHostKeyChecking no" >> ~/.ssh/config
                set -x
                
                mvn -f repo/pom.xml validate
                mvn -f repo/pom.xml clean package -DskipTests=true -s repo/settings.xml -P source,javadoc,license
                mvn -f repo/pom.xml test -s repo/settings.xml
                mvn -f repo/pom.xml checkstyle:check -s repo/settings.xml -P checkstyle
                mvn -f repo/pom.xml install -DskipTests=true -s repo/settings.xml
                mvn -f repo/pom.xml site:site site:stage -s repo/settings.xml -P site,javadoc,changelog,test-report,github
                mvn -f repo/pom.xml scm-publish:publish-scm -s repo/settings.xml -P site,github
  - name: prod-pine-core-java
    plan:
      - get: repo
        passed: [ uat-pine-core-java ]
      - task: build
        privileged: true
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: $DOCKER_USERNAME/openjdk17
              tag: latest
          caches:
            - path: $HOME/.m2/repository
          inputs:
            - name: repo
          outputs:
            - name: artifact
          params:
            DOCKER_USERNAME: ((DOCKER_USERNAME))
            PRIVKEY: ((GITHUB_KEY))
            PUBKEY: ((GITHUB_KEY_PUB))
            GITHUB_USERNAME: ((GITHUB_USERNAME))
            GITHUB_EMAIL: ((GITHUB_EMAIL))
            GITHUB_PACKAGE_TOKEN: ((GITHUB_PACKAGE_TOKEN))
            GITHUB_ARTIFACTORY_URL: ((GITHUB_ARTIFACTORY_URL))
            SONAR_TOKEN: ((SONAR_TOKEN))
            SONAR_URL: ((SONAR_URL))
            JFROG_ARTIFACTORY_USERNAME: ((JFROG_ARTIFACTORY_USERNAME))
            JFROG_ARTIFACTORY_PASSWORD: ((JFROG_ARTIFACTORY_ENCRYPTED_PASSWORD))
            JFROG_ARTIFACTORY_SNAPSHOT_URL: ((JFROG_ARTIFACTORY_SNAPSHOT_URL))
            JFROG_ARTIFACTORY_RELEASE_URL: ((JFROG_ARTIFACTORY_RELEASE_URL))
            JFROG_ARTIFACTORY_CONTEXT_URL: ((JFROG_ARTIFACTORY_CONTEXT_URL))
            JFROG_ARTIFACTORY_REPOSITORY_PREFIX: ((JFROG_ARTIFACTORY_REPOSITORY_PREFIX))
            NEXUS_ARTIFACTORY_USERNAME: ((NEXUS_ARTIFACTORY_USERNAME))
            NEXUS_ARTIFACTORY_PASSWORD: ((NEXUS_ARTIFACTORY_PASSWORD))
            NEXUS_ARTIFACTORY_HOST_URL: ((NEXUS_ARTIFACTORY_HOST_URL))
            NEXUS_ARTIFACTORY_SNAPSHOT_URL: ((NEXUS_ARTIFACTORY_SNAPSHOT_URL))
            NEXUS_ARTIFACTORY_RELEASE_URL: ((NEXUS_ARTIFACTORY_RELEASE_URL))
          run:
            path: sh
            args:
              - -exc
              - |
                git config --global user.email "$GITHUB_USERNAME"
                git config --global user.name "$GITHUB_EMAIL"
                
                mkdir ~/.ssh
                ls ~/.ssh/
                set +x
                echo "$PRIVKEY" > ~/.ssh/id_rsa
                echo "$PUBKEY" > ~/.ssh/id_rsa.pub
                chmod 600 ~/.ssh/id_rsa
                chmod 600 ~/.ssh/id_rsa.pub
                echo "Host *" > ~/.ssh/config
                echo "    StrictHostKeyChecking no" >> ~/.ssh/config
                set -x
                
                mvn -f repo/pom.xml validate
                mvn -f repo/pom.xml clean package -DskipTests=true -s repo/settings.xml -P source,javadoc,license
                mvn -f repo/pom.xml test -s repo/settings.xml
                mvn -f repo/pom.xml checkstyle:check -s repo/settings.xml -P checkstyle
                mvn -f repo/pom.xml install -DskipTests=true -s repo/settings.xml
                mvn -f repo/pom.xml site:site site:stage -s repo/settings.xml -P site,javadoc,changelog,test-report,github
                mvn -f repo/pom.xml scm-publish:publish-scm -s repo/settings.xml -P site,github
                mvn -f repo/pom.xml sonar:sonar -s repo/settings.xml -P sonar
                mvn -f repo/pom.xml deploy -s repo/settings.xml -P jfrog
                mvn -f repo/pom.xml deploy -s repo/settings.xml -P github
                mvn -f repo/pom.xml deploy -s settings.xml -P nexus -DskipTests=true
